{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["UploadButton","handleFile","className","style","position","overflow","background","borderRadius","width","height","display","justifyContent","alignItems","fontSize","cursor","type","onChange","e","target","files","hidden","opacity","right","top","App","props","handleFileProcessing","event","code","result","setState","uploaded","index","animateAndDownload","handleUploadFile","file","fileReader","FileReader","onload","readAsText","interval","setInterval","state","length","clearInterval","console","log","this","id","placeholder","mode","theme","name","onLoad","showPrintMargin","showGutter","highlightActiveLine","value","substr","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","flexGrow","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAMMA,G,YAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OAChB,2BACGC,UAAU,kBACVC,MAAO,CACHC,SAAU,WACVC,SAAU,SACVC,WAAY,OACZC,aAAc,GACdC,MAAO,IACPC,OAAQ,GACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,SAAU,GACVC,OAAQ,YAbf,SAeU,IACP,2BACIC,KAAK,OAELC,SAAU,SAAAC,GAAC,OAAIhB,EAAWgB,EAAEC,OAAOC,MAAM,KACzCC,QAAM,EACNjB,MAAO,CACHkB,QAAS,EACTjB,SAAU,WACVkB,MAAO,EACPC,IAAK,QAqFNC,E,YA9EX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAIVC,qBAAuB,SAAAC,GACnB,IAAMC,EAAOD,EAAMT,OAAOW,OAC1B,EAAKC,SAAS,CAACC,UAAU,IAAO,WAC5B,EAAKD,SAAS,CAACE,MAAO,EAAGJ,SAAO,WAC5B,EAAKK,4BATE,EAcnBC,iBAAmB,SAAAC,GAEf,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,OAAS,EAAKZ,qBACzBU,EAAWG,WAAWJ,IAlBP,EAqBnBF,mBAAqB,WACjB,IAAMO,EAAWC,aAAY,WAAO,IACxBT,EAAU,EAAKU,MAAfV,MACR,EAAKF,SAAS,CAACE,MAAOA,EAAS,IAAI,WAC3BA,IAAU,EAAKU,MAAMd,KAAKe,SAC1BC,cAAcJ,GACdK,QAAQC,IAAI,cAIrB,KA7BH,EAAKJ,MAAQ,CAACV,MAAO,EAAGJ,KAAK,GAAIG,UAAS,GAF3B,E,sEAoCT,IAAD,EAC6BgB,KAAKL,MAA/Bd,EADH,EACGA,KAAMI,EADT,EACSA,MAAOD,EADhB,EACgBA,SACrB,OACI,yBAAK5B,MAAO,CAACM,OAAQ,QAASD,MAAO,QAASE,QAAS,OAAQC,eAAgB,WACzEoB,EAON,yBAAKiB,GAAI,kBACT,kBAAC,IAAD,CACIC,YAAY,mBACZC,KAAK,SACLC,MAAM,UACNC,KAAK,QACLC,OAAQN,KAAKM,OACbrC,SAAU+B,KAAK/B,SACfH,SAAU,GACVyC,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBC,MAAO7B,EAAK8B,OAAO,EAAG1B,GACtB2B,WAAY,CACRC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,iBAAiB,EACjBC,QAAS,GAGb7D,MAAO,CAACM,OAAQ,QAASD,MAAM,YA3B3B,6BACI,6CACA,yBAAKL,MAAO,CAAEO,QAAS,OAAQuD,SAAU,EAAGrD,WAAY,WAC5D,kBAAC,EAAD,CAAcX,WAAY8C,KAAKb,0B,GA9CjCgC,aCzBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.82dc10c8.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport brace from \"brace\";\nimport AceEditor from \"react-ace\";\nimport \"brace/mode/python\";\nimport \"brace/theme/monokai\";\n\nconst UploadButton = ({ handleFile }) =>\n    (<label\n        className=\"btn btn-primary\"\n        style={{\n            position: \"relative\",\n            overflow: \"hidden\",\n            background: \"#AAA\",\n            borderRadius: 10,\n            width: 200,\n            height: 80,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            fontSize: 20,\n            cursor: 'pointer',\n        }}>\n        Upload{\" \"}\n        <input\n            type=\"file\"\n            // accept={\"application/json,.json\"}\n            onChange={e => handleFile(e.target.files[0])}\n            hidden\n            style={{\n                opacity: 0,\n                position: \"absolute\",\n                right: 0,\n                top: 0\n            }}\n        />\n    </label>);\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {index: 0, code:'', uploaded:false};\n    }\n\n    handleFileProcessing = event => {\n        const code = event.target.result;\n        this.setState({uploaded: true}, () => {\n            this.setState({index: 0, code}, () => {\n                this.animateAndDownload();\n            });\n        })\n    };\n\n    handleUploadFile = file => {\n        // differ file processing to handleFileProcessing\n        const fileReader = new FileReader();\n        fileReader.onload = this.handleFileProcessing;\n        fileReader.readAsText(file);\n    };\n\n    animateAndDownload = () => {\n        const interval = setInterval(() => {\n            const { index } = this.state;\n            this.setState({index: index  + 1}, () => {\n                if (index === this.state.code.length) {\n                    clearInterval(interval)\n                    console.log('done')\n                }\n            });\n\n        }, 50)\n\n    };\n\n\n    render() {\n        const { code, index, uploaded } = this.state\n        return (\n            <div style={{height: '100vh', width: '100vw', display: 'flex', justifyContent: 'center'}}>\n                {!uploaded?\n                    <div>\n                        <h1>Code Animator</h1>\n                        <div style={{ display: 'flex', flexGrow: 1, alignItems: 'center'}}>\n                    <UploadButton handleFile={this.handleUploadFile} />\n                        </div>\n                    </div>:\n            <div id={\"code-container\"}>\n            <AceEditor\n                placeholder=\"Placeholder Text\"\n                mode=\"python\"\n                theme=\"monokai\"\n                name=\"hello\"\n                onLoad={this.onLoad}\n                onChange={this.onChange}\n                fontSize={24}\n                showPrintMargin={true}\n                showGutter={true}\n                highlightActiveLine={true}\n                value={code.substr(0, index)}\n                setOptions={{\n                    enableBasicAutocompletion: false,\n                    enableLiveAutocompletion: false,\n                    enableSnippets: false,\n                    showLineNumbers: true,\n                    tabSize: 2,\n\n                }}\n                style={{height: '100vh', width:'100vw'}}\n            />\n            </div>}\n            </div>\n\n\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}